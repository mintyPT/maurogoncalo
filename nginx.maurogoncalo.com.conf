server {
    listen 80;
    server_name maurogoncalo.com www.maurogoncalo.com *.maurogoncalo.com;
    return 301 https://maurogoncalo.com$request_uri;
    # error_log  /var/log/nginx/error2.log debug;
}

server {
    listen 443 ssl http2;

    # add Strict-Transport-Security to prevent man in the middle attacks
    add_header Strict-Transport-Security "max-age=31536000";

    # ssl certificate config
    ssl_certificate /etc/letsencrypt/live/www.maurogoncalo.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.maurogoncalo.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/www.maurogoncalo.com/chain.pem;

    server_name www.maurogoncalo.com;
    return 301 https://maurogoncalo.com$request_uri;
}


server {

    listen 443 ssl http2;

    server_name maurogoncalo.com;

    # add Strict-Transport-Security to prevent man in the middle attacks
    add_header Strict-Transport-Security "max-age=31536000";

    # ssl certificate config
    ssl_certificate /etc/letsencrypt/live/maurogoncalo.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/maurogoncalo.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/maurogoncalo.com/chain.pem;

    # error_log  /var/log/nginx/error2.log debug;

    #rewrite ^\/assets\/([\w\.?]+)\.\d+\.(js|css) /assets/$1.$2 last;

    # Compression

    # Enable Gzip compressed.
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1.
    gzip_http_version  1.1;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/x-javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
        # text/html is always compressed by HttpGzipModule

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://127.0.0.1:3005;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # location /assets/ {
    #   root /home/www/maurogoncalo/public/;
    #   access_log off;
    #   expires max;
    # }

}

